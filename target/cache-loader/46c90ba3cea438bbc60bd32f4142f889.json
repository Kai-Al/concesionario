{"remainingRequest":"C:\\Users\\kaiki\\Documents\\NetBeansProjects\\concesionario\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\Users\\kaiki\\Documents\\NetBeansProjects\\concesionario\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\Users\\kaiki\\Documents\\NetBeansProjects\\concesionario\\node_modules\\tslint-loader\\index.js!C:\\Users\\kaiki\\Documents\\NetBeansProjects\\concesionario\\src\\main\\webapp\\app\\modules\\administration\\health\\health.tsx","dependencies":[{"path":"C:\\Users\\kaiki\\Documents\\NetBeansProjects\\concesionario\\src\\main\\webapp\\app\\modules\\administration\\health\\health.tsx","mtime":1660603224851},{"path":"C:\\Users\\kaiki\\Documents\\NetBeansProjects\\concesionario\\node_modules\\react-hot-loader\\webpack.js","mtime":1505850161000},{"path":"C:\\Users\\kaiki\\Documents\\NetBeansProjects\\concesionario\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"C:\\Users\\kaiki\\Documents\\NetBeansProjects\\concesionario\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\kaiki\\Documents\\NetBeansProjects\\concesionario\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\kaiki\\Documents\\NetBeansProjects\\concesionario\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Translate } from 'react-jhipster';\r\nimport { Table, Badge, Col, Row, Button } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { systemHealth } from '../administration.reducer';\r\nimport HealthModal from './health-modal';\r\nvar HealthPage = /** @class */ (function (_super) {\r\n    tslib_1.__extends(HealthPage, _super);\r\n    function HealthPage() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.state = {\r\n            healthObject: {},\r\n            showModal: false\r\n        };\r\n        _this.getSystemHealth = function () {\r\n            if (!_this.props.isFetching) {\r\n                _this.props.systemHealth();\r\n            }\r\n        };\r\n        _this.getSystemHealthInfo = function (name, healthObject) { return function () {\r\n            _this.setState({\r\n                showModal: true,\r\n                healthObject: tslib_1.__assign({}, healthObject, { name: name })\r\n            });\r\n        }; };\r\n        _this.handleClose = function () {\r\n            _this.setState({\r\n                showModal: false\r\n            });\r\n        };\r\n        _this.renderModal = function () {\r\n            var healthObject = _this.state.healthObject;\r\n            return (React.createElement(HealthModal, { healthObject: healthObject, handleClose: _this.handleClose, showModal: _this.state.showModal }));\r\n        };\r\n        return _this;\r\n    }\r\n    HealthPage.prototype.componentDidMount = function () {\r\n        this.props.systemHealth();\r\n    };\r\n    HealthPage.prototype.render = function () {\r\n        var _this = this;\r\n        var _a = this.props, health = _a.health, isFetching = _a.isFetching;\r\n        var data = (health || {}).checks || {};\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(\"h2\", { className: \"health-page-heading\" }, \"Health Checks\"),\r\n            React.createElement(\"p\", null,\r\n                React.createElement(Button, { onClick: this.getSystemHealth, color: isFetching ? 'btn btn-danger' : 'btn btn-primary', disabled: isFetching },\r\n                    React.createElement(FontAwesomeIcon, { icon: \"sync\" }),\r\n                    \"\\u00A0\",\r\n                    React.createElement(Translate, { component: \"span\", contentKey: \"health.refresh.button\" }, \"Refresh\"))),\r\n            React.createElement(Row, null,\r\n                React.createElement(Col, { md: \"12\" },\r\n                    React.createElement(Table, { bordered: true },\r\n                        React.createElement(\"thead\", null,\r\n                            React.createElement(\"tr\", null,\r\n                                React.createElement(\"th\", null, \"Service Name\"),\r\n                                React.createElement(\"th\", null, \"Status\"),\r\n                                React.createElement(\"th\", null, \"Details\"))),\r\n                        React.createElement(\"tbody\", null, Object.keys(data).map(function (configPropKey, configPropIndex) {\r\n                            return configPropKey !== 'status' ? (React.createElement(\"tr\", { key: configPropIndex },\r\n                                React.createElement(\"td\", null, data[configPropKey].name),\r\n                                React.createElement(\"td\", null,\r\n                                    React.createElement(Badge, { color: data[configPropKey].state !== 'UP' ? 'danger' : 'success' }, data[configPropKey].state)),\r\n                                React.createElement(\"td\", null, data[configPropKey].data ? (React.createElement(\"a\", { onClick: _this.getSystemHealthInfo(data[configPropKey].name, data[configPropKey]) },\r\n                                    React.createElement(FontAwesomeIcon, { icon: \"eye\" }))) : null))) : null;\r\n                        }))))),\r\n            this.renderModal()));\r\n    };\r\n    return HealthPage;\r\n}(React.Component));\r\nexport { HealthPage };\r\nvar mapStateToProps = function (storeState) { return ({\r\n    health: storeState.administration.health,\r\n    isFetching: storeState.administration.loading\r\n}); };\r\nvar mapDispatchToProps = { systemHealth: systemHealth };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HealthPage);\r\n",{"version":3,"file":"C:\\Users\\kaiki\\Documents\\NetBeansProjects\\concesionario\\src\\main\\webapp\\app\\modules\\administration\\health\\health.tsx","sourceRoot":"","sources":["C:\\Users\\kaiki\\Documents\\NetBeansProjects\\concesionario\\node_modules\\tslint-loader\\index.js!C:\\Users\\kaiki\\Documents\\NetBeansProjects\\concesionario\\src\\main\\webapp\\app\\modules\\administration\\health\\health.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Translate } from 'react-jhipster';\nimport { Table, Badge, Col, Row, Button } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { IRootState } from 'app/shared/reducers';\nimport { systemHealth } from '../administration.reducer';\nimport HealthModal from './health-modal';\n\nexport interface IHealthPageProps extends StateProps, DispatchProps {}\n\nexport interface IHealthPageState {\n  healthObject: any,\n  showModal: boolean\n}\n\nexport class HealthPage extends React.Component<IHealthPageProps, IHealthPageState> {\n  state: IHealthPageState = {\n    healthObject: {},\n    showModal: false\n  };\n\n  componentDidMount() {\n    this.props.systemHealth();\n  }\n\n  getSystemHealth = () => {\n    if (!this.props.isFetching) {\n      this.props.systemHealth();\n    }\n  }\n\n  getSystemHealthInfo = (name, healthObject) => () => {\n    this.setState({\n      showModal: true,\n      healthObject: {\n        ...healthObject,\n        name\n      }\n    });\n  }\n\n  handleClose = () => {\n    this.setState({\n        showModal: false\n    });\n  }\n\n  renderModal = () => {\n    const { healthObject } = this.state;\n    return (\n      <HealthModal healthObject={healthObject} handleClose={this.handleClose} showModal={this.state.showModal} />\n    );\n  }\n\n  render() {\n    const { health, isFetching } = this.props;\n    const data = (health || {}).checks || {};\n    return (\n      <div>\n          <h2 className=\"health-page-heading\">Health Checks</h2>\n          <p>\n            <Button onClick={this.getSystemHealth} color={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\n               <FontAwesomeIcon icon=\"sync\" />&nbsp;\n              <Translate component=\"span\" contentKey=\"health.refresh.button\">Refresh</Translate>\n            </Button>\n          </p>\n          <Row>\n            <Col md=\"12\">\n            <Table bordered>\n               <thead>\n                 <tr>\n                   <th>Service Name</th>\n                   <th>Status</th>\n                   <th>Details</th>\n                 </tr>\n               </thead>\n               <tbody>\n              {Object.keys(data).map((configPropKey, configPropIndex) =>\n                configPropKey !== 'status' ? (\n                  <tr key={configPropIndex}>\n                    <td>{data[configPropKey].name}</td>\n                    <td>\n                      <Badge color={data[configPropKey].state !== 'UP' ? 'danger' : 'success'}>\n                        {data[configPropKey].state}\n                      </Badge>\n                    </td>\n                    <td>\n                      {data[configPropKey].data ? (\n                      <a onClick={this.getSystemHealthInfo(data[configPropKey].name, data[configPropKey])}>\n                        <FontAwesomeIcon icon=\"eye\" />\n                      </a>) : null}\n                    </td>\n                  </tr>\n                ) : null\n                )}\n              </tbody>\n             </Table>\n            </Col>\n          </Row>\n          {this.renderModal()}\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  health: storeState.administration.health,\n  isFetching: storeState.administration.loading\n});\n\nconst mapDispatchToProps = { systemHealth };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HealthPage);\n"]}]}