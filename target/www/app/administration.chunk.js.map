{"version":3,"file":"app/administration.chunk.js","sources":["webpack:///./src/main/webapp/app/modules/administration/docs/docs.tsx","webpack:///./src/main/webapp/app/modules/administration/health/health-modal.tsx","webpack:///./src/main/webapp/app/modules/administration/health/health.tsx","webpack:///./src/main/webapp/app/modules/administration/index.tsx","webpack:///./src/main/webapp/app/modules/administration/logs/logs.tsx","webpack:///./src/main/webapp/app/modules/administration/metrics/metrics-modal.tsx","webpack:///./src/main/webapp/app/modules/administration/metrics/metrics.tsx","webpack:///./src/main/webapp/app/modules/administration/metrics/thread-item.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/index.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-delete-dialog.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-detail.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-update.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management.tsx","webpack:///./src/main/webapp/app/shared/util/pagination.constants.ts"],"sourcesContent":["import React from 'react';\n\nconst DocsPage = () => (\n  <div>\n    <iframe\n      src=\"swagger-ui/index.html\" width=\"100%\" height=\"800\"\n      title=\"Swagger UI\" seamless style={{ border: 'none' }}\n    />\n  </div>\n);\n\nexport default DocsPage;\n","import React from 'react';\nimport { Table, Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n\nconst formatDiskSpaceOutput = rawValue => {\n  // Should display storage space in an human readable unit\n  const val = rawValue / 1073741824;\n  if (val > 1) {\n    // Value\n    return val.toFixed(2) + ' GB';\n  } else {\n    return (rawValue / 1048576).toFixed(2) + ' MB';\n  }\n};\n\nconst HealthModal = ({ handleClose, healthObject, showModal }) => {\n  const data = healthObject.data || {};\n  return (\n    <Modal isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }} toggle={handleClose}>\n      <ModalHeader toggle={handleClose}>{healthObject.name}</ModalHeader>\n      <ModalBody>\n        <Table bordered>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(data).map((key, index) => (\n              <tr key={index}>\n                <td>{key}</td>\n                <td>{(healthObject.name === 'diskSpace') ? formatDiskSpaceOutput(data[key]) : JSON.stringify(data[key]) }</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"primary\" onClick={handleClose}>\n          Close\n        </Button>\n      </ModalFooter>\n    </Modal>\n)};\n\nexport default HealthModal;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Translate } from 'react-jhipster';\nimport { Table, Badge, Col, Row, Button } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { IRootState } from 'app/shared/reducers';\nimport { systemHealth } from '../administration.reducer';\nimport HealthModal from './health-modal';\n\nexport interface IHealthPageProps extends StateProps, DispatchProps {}\n\nexport interface IHealthPageState {\n  healthObject: any,\n  showModal: boolean\n}\n\nexport class HealthPage extends React.Component<IHealthPageProps, IHealthPageState> {\n  state: IHealthPageState = {\n    healthObject: {},\n    showModal: false\n  };\n\n  componentDidMount() {\n    this.props.systemHealth();\n  }\n\n  getSystemHealth = () => {\n    if (!this.props.isFetching) {\n      this.props.systemHealth();\n    }\n  }\n\n  getSystemHealthInfo = (name, healthObject) => () => {\n    this.setState({\n      showModal: true,\n      healthObject: {\n        ...healthObject,\n        name\n      }\n    });\n  }\n\n  handleClose = () => {\n    this.setState({\n        showModal: false\n    });\n  }\n\n  renderModal = () => {\n    const { healthObject } = this.state;\n    return (\n      <HealthModal healthObject={healthObject} handleClose={this.handleClose} showModal={this.state.showModal} />\n    );\n  }\n\n  render() {\n    const { health, isFetching } = this.props;\n    const data = (health || {}).checks || {};\n    return (\n      <div>\n          <h2 className=\"health-page-heading\">Health Checks</h2>\n          <p>\n            <Button onClick={this.getSystemHealth} color={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\n               <FontAwesomeIcon icon=\"sync\" />&nbsp;\n              <Translate component=\"span\" contentKey=\"health.refresh.button\">Refresh</Translate>\n            </Button>\n          </p>\n          <Row>\n            <Col md=\"12\">\n            <Table bordered>\n               <thead>\n                 <tr>\n                   <th>Service Name</th>\n                   <th>Status</th>\n                   <th>Details</th>\n                 </tr>\n               </thead>\n               <tbody>\n              {Object.keys(data).map((configPropKey, configPropIndex) =>\n                configPropKey !== 'status' ? (\n                  <tr key={configPropIndex}>\n                    <td>{data[configPropKey].name}</td>\n                    <td>\n                      <Badge color={data[configPropKey].state !== 'UP' ? 'danger' : 'success'}>\n                        {data[configPropKey].state}\n                      </Badge>\n                    </td>\n                    <td>\n                      {data[configPropKey].data ? (\n                      <a onClick={this.getSystemHealthInfo(data[configPropKey].name, data[configPropKey])}>\n                        <FontAwesomeIcon icon=\"eye\" />\n                      </a>) : null}\n                    </td>\n                  </tr>\n                ) : null\n                )}\n              </tbody>\n             </Table>\n            </Col>\n          </Row>\n          {this.renderModal()}\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  health: storeState.administration.health,\n  isFetching: storeState.administration.loading\n});\n\nconst mapDispatchToProps = { systemHealth };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HealthPage);\n","import React from 'react';\n\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\nimport UserManagement from './user-management';\nimport Logs from './logs/logs';\nimport Health from './health/health';\nimport Metrics from './metrics/metrics';\nimport Docs from './docs/docs';\n\nconst Routes = ({ match }) => (\n  <div>\n    <ErrorBoundaryRoute path={`${match.url}/user-management`} component={UserManagement} />\n    <ErrorBoundaryRoute exact path={`${match.url}/health`} component={Health} />\n    <ErrorBoundaryRoute exact path={`${match.url}/metrics`} component={Metrics} />\n    <ErrorBoundaryRoute exact path={`${match.url}/docs`} component={Docs} />\n    <ErrorBoundaryRoute exact path={`${match.url}/logs`} component={Logs} />\n  </div>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Translate } from 'react-jhipster';\n\nimport { getLoggers, changeLogLevel } from '../administration.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface ILogsPageProps extends StateProps, DispatchProps {}\n\nexport interface ILogsPageState {\n  filter: string\n}\n\nexport class LogsPage extends React.Component<ILogsPageProps, ILogsPageState> {\n\n  state: ILogsPageState = {\n    filter: ''\n  };\n\n  componentDidMount() {\n    this.props.getLoggers();\n  }\n\n  getLogs = () => {\n    if (!this.props.isFetching) {\n      this.props.getLoggers();\n    }\n  }\n\n  changeLevel = (loggerName, level) => () => {\n    this.props.changeLogLevel(loggerName, level);\n  }\n\n  setFilter = evt => {\n    this.setState({\n      filter: evt.target.value\n    });\n  }\n\n  getClassName = (level, check, className) => level === check ? `btn btn-sm btn-${className}` : 'btn btn-sm btn-light';\n\n  filterFn = l => l.name.toUpperCase().includes(this.state.filter.toUpperCase());\n\n  render() {\n    const { logs, isFetching } = this.props;\n    const { filter } = this.state;\n    const loggers = logs ? logs.loggers : [];\n    return (\n        <div>\n          <h2 className=\"logs-page-heading\"><Translate contentKey=\"logs.title\">Logs</Translate></h2>\n          <p><Translate contentKey=\"logs.nbloggers\" interpolate={{ total: loggers.length }}>There are {loggers.length.toString()} loggers.</Translate></p>\n\n          <span><Translate contentKey=\"logs.filter\">Filter</Translate></span>\n          <input type=\"text\" value={filter} onChange={this.setFilter} className=\"form-control\" disabled={isFetching} />\n\n          <table className=\"table table-sm table-striped table-bordered\" >\n            <thead>\n              <tr title=\"click to order\">\n                <th><span><Translate contentKey=\"logs.table.name\">Name</Translate></span></th>\n                <th><span><Translate contentKey=\"logs.table.level\">Level</Translate></span></th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n              loggers.filter(this.filterFn).map((logger, i) =>\n                <tr key={`log-row-${i}`}>\n                  <td><small>{logger.name}</small></td>\n                  <td>\n                    <button disabled={isFetching} onClick={this.changeLevel(logger.name, 'TRACE')} className={this.getClassName(logger.level, 'TRACE', 'primary')}>TRACE</button>\n                    <button disabled={isFetching} onClick={this.changeLevel(logger.name, 'DEBUG')} className={this.getClassName(logger.level, 'DEBUG', 'success')}>DEBUG</button>\n                    <button disabled={isFetching} onClick={this.changeLevel(logger.name, 'INFO')} className={this.getClassName(logger.level, 'INFO', 'info')}>INFO</button>\n                    <button disabled={isFetching} onClick={this.changeLevel(logger.name, 'WARN')} className={this.getClassName(logger.level, 'WARN', 'warning')}>WARN</button>\n                    <button disabled={isFetching} onClick={this.changeLevel(logger.name, 'ERROR')} className={this.getClassName(logger.level, 'ERROR', 'danger')}>ERROR</button>\n                    <button disabled={isFetching} onClick={this.changeLevel(logger.name, 'OFF')} className={this.getClassName(logger.level, 'OFF', 'secondary')}>OFF</button>\n                  </td>\n                </tr>\n              )\n            }\n            </tbody>\n          </table>\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ administration }: IRootState) => ({\n  logs: administration.logs,\n  isFetching: administration.loading\n});\n\nconst mapDispatchToProps = { getLoggers, changeLogLevel };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogsPage);\n","import React from 'react';\nimport { Table, Modal, ModalHeader, ModalBody, ModalFooter, Button, Input, Badge, Row } from 'reactstrap';\n\nimport ThreadItem from './thread-item';\n\nexport interface IMetricsModalProps {\n  showModal: boolean;\n  handleClose: Function;\n  threadDump: any;\n}\n\nexport interface IMetricsModalState {\n  badgeFilter: string;\n  searchFilter: string;\n}\n\nexport class MetricsModal extends React.Component<IMetricsModalProps, IMetricsModalState> {\n  state: IMetricsModalState = {\n    badgeFilter: '',\n    searchFilter: ''\n  };\n\n  computeFilteredList = () => {\n    const { badgeFilter, searchFilter } = this.state;\n    let filteredList = this.props.threadDump.threads;\n    if (badgeFilter !== '') {\n      filteredList = filteredList.filter(t => t.threadState === badgeFilter);\n    }\n    if (searchFilter !== '') {\n      filteredList = filteredList.filter(t => t.lockName &&\n                                              t.lockName.toLowerCase().includes(searchFilter.toLowerCase()));\n    }\n    return filteredList;\n  };\n\n  computeCounters = () => {\n    let threadDumpAll = 0;\n    let threadDumpRunnable = 0;\n    let threadDumpWaiting = 0;\n    let threadDumpTimedWaiting = 0;\n    let threadDumpBlocked = 0;\n\n    this.props.threadDump.threads.forEach(t => {\n      switch (t.threadState) {\n        case 'RUNNABLE':\n          threadDumpRunnable++;\n          break;\n        case 'WAITING':\n          threadDumpWaiting++;\n          break;\n        case 'TIMED_WAITING':\n          threadDumpTimedWaiting++;\n          break;\n        case 'BLOCKED':\n          threadDumpBlocked++;\n          break;\n        default:\n          break;\n      }\n    });\n\n    threadDumpAll = threadDumpRunnable + threadDumpWaiting + threadDumpTimedWaiting + threadDumpBlocked;\n    return { threadDumpAll, threadDumpRunnable, threadDumpWaiting, threadDumpTimedWaiting, threadDumpBlocked };\n  };\n\n  getBadgeClass = threadState => {\n    if (threadState === 'RUNNABLE') {\n      return 'badge-success';\n    } else if (threadState === 'WAITING') {\n      return 'badge-info';\n    } else if (threadState === 'TIMED_WAITING') {\n      return 'badge-warning';\n    } else if (threadState === 'BLOCKED') {\n      return 'badge-danger';\n    }\n  };\n\n  updateBadgeFilter = badge => () => this.setState({ badgeFilter: badge });\n\n  updateSearchFilter = event => this.setState({ searchFilter: event.target.value });\n\n  render() {\n    const { showModal, handleClose, threadDump } = this.props;\n    let counters = {} as any;\n    let filteredList = null;\n    if (threadDump && threadDump.threads) {\n      counters = this.computeCounters();\n      filteredList = this.computeFilteredList();\n    }\n\n    return <Modal\n      isOpen={showModal} toggle={handleClose} className=\"modal-lg\">\n      <ModalHeader toggle={handleClose}>Threads dump</ModalHeader>\n      <ModalBody>\n        <Badge color=\"primary\" className=\"hand\" onClick={this.updateBadgeFilter('')}>All&nbsp;\n          <Badge pill>{counters.threadDumpAll || 0}</Badge>\n        </Badge>&nbsp;\n        <Badge color=\"success\" className=\"hand\" onClick={this.updateBadgeFilter('RUNNABLE')}>Runnable&nbsp;\n          <Badge pill>{counters.threadDumpRunnable || 0}</Badge>\n        </Badge>&nbsp;\n        <Badge color=\"info\" className=\"hand\" onClick={this.updateBadgeFilter('WAITING')}>Waiting&nbsp;\n          <Badge pill>{counters.threadDumpWaiting || 0}</Badge>\n        </Badge>&nbsp;\n        <Badge color=\"warning\" className=\"hand\" onClick={this.updateBadgeFilter('TIMED_WAITING')}>Timed Waiting&nbsp;\n          <Badge pill>{counters.threadDumpTimedWaiting || 0}</Badge>\n        </Badge>&nbsp;\n        <Badge color=\"danger\" className=\"hand\" onClick={this.updateBadgeFilter('BLOCKED')}>Blocked&nbsp;\n          <Badge pill>{counters.threadDumpBlocked || 0}</Badge>\n        </Badge>&nbsp;\n        <div className=\"mt-2\">&nbsp;</div>\n        <Input type=\"text\" className=\"form-control\" placeholder=\"Filter by Lock Name...\"\n               onChange={this.updateSearchFilter}/>\n        <div style={{ padding: '10px' }}>\n          {filteredList ? filteredList.map((threadDumpInfo, i) =>\n            (\n              <div key={`dump-${i}`}>\n                <h6> <span className={'badge ' + this.getBadgeClass(threadDumpInfo.threadState)}>{threadDumpInfo.threadState}</span>&nbsp;\n                  {threadDumpInfo.threadName} (ID {threadDumpInfo.threadId})&nbsp;\n                </h6>\n                <ThreadItem threadDumpInfo={threadDumpInfo}/>\n                <Row>\n                  <Table responsive>\n                    <thead>\n                    <tr>\n                      <th>Blocked Time</th>\n                      <th>Blocked Count</th>\n                      <th>Waited Time</th>\n                      <th>Waited Count</th>\n                      <th>Lock Name</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr key={threadDumpInfo.lockName}>\n                      <td>{threadDumpInfo.blockedTime}</td>\n                      <td>{threadDumpInfo.blockedCount}</td>\n                      <td>{threadDumpInfo.waitedTime}</td>\n                      <td>{threadDumpInfo.waitedCount}</td>\n                      <td className=\"thread-dump-modal-lock\" title={threadDumpInfo.lockName}>\n                        <code>{threadDumpInfo.lockName}</code></td>\n                    </tr>\n                    </tbody>\n                  </Table>\n                </Row>\n              </div>\n            )\n          ) : null}\n        </div>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"primary\" onClick={handleClose}>Close</Button>\n      </ModalFooter>\n    </Modal>;\n  }\n}\n\nexport default MetricsModal;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Table, Progress, Col, Row, Button } from 'reactstrap';\nimport { Translate, TextFormat } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { APP_WHOLE_NUMBER_FORMAT, APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT } from 'app/config/constants';\nimport { systemMetrics, systemThreadDump } from '../administration.reducer';\nimport MetricsModal from './metrics-modal';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IMetricsPageProps extends StateProps, DispatchProps {}\n\nexport interface IMetricsPageState {\n  showModal: boolean;\n}\n\nexport class MetricsPage extends React.Component<IMetricsPageProps, IMetricsPageState> {\n  state: IMetricsPageState = {\n    showModal: false\n  };\n\n  componentDidMount() {\n    this.props.systemMetrics();\n  }\n\n  getMetrics = () => {\n    if (!this.props.isFetching) {\n      this.props.systemMetrics();\n    }\n  }\n\n  getThreadDump = () => {\n    this.props.systemThreadDump();\n    this.setState({\n      showModal: true\n    });\n  }\n\n  handleClose = () => {\n    this.setState({\n        showModal: false\n    });\n  }\n\n  filterNaN = input => isNaN(input) ? 0 : input;\n\n  getStats = metrics => {\n    const stat = {\n      servicesStats: {},\n      cachesStats: {}\n    };\n    if (!this.props.isFetching && metrics && metrics.application) {\n      Object.keys(metrics.application).forEach((key, indexNm) => {\n        if (key.indexOf('com.udea.concesionario.controller') !== -1) {\n          stat.servicesStats[key] = metrics.application[key];\n        } else if (key.indexOf('net.sf.ehcache.Cache') !== -1) {\n          // remove gets or puts\n          const index = key.lastIndexOf('.');\n          const newKey = key.substr(0, index);\n          // Keep the name of the domain\n          stat.cachesStats[newKey] = {\n            name: newKey,\n            value: metrics.application[key]\n          };\n        }\n      });\n\n    }\n    return stat;\n  }\n\n  gaugeRow = (metrics, label: String, key) => (\n    metrics.base[key] ?\n      <Row>\n        <Col md=\"9\">{label}</Col>\n        <Col md=\"3\" className=\"text-right\">\n          {metrics.base[key]}\n        </Col>\n      </Row>\n      : null\n  );\n\n  renderModal = () => <MetricsModal handleClose={this.handleClose} showModal={this.state.showModal} threadDump={this.props.threadDump}/>;\n\n  renderBase = metrics => (\n    <Row>\n      <Col sm=\"12\">\n        <h3>JVM Metrics</h3>\n        <Row>\n          <Col md=\"4\">\n            <b>Memory</b>\n\n            <p>\n              <span>Heap Memory</span> (\n                <TextFormat\n                  value={metrics.base['memory.usedHeap'] / 1048576}\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT} />\n                M / <TextFormat\n                  value={metrics.base['memory.maxHeap'] / 1048576}\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT} />\n                M)\n            </p>\n            <Progress animated\n              min=\"0\"\n              max={metrics.base['memory.maxHeap']}\n              value={metrics.base['memory.usedHeap']}\n              color=\"success\"\n            >\n              <span>\n                <TextFormat\n                  value={metrics.base['memory.usedHeap'] * 100 / metrics.base['memory.maxHeap']}\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT} />\n                %\n              </span>\n            </Progress>\n\n            <p>\n              <span>Non-Heap Memory</span> (\n                <TextFormat\n                  value={metrics.base['memory.usedNonHeap'] / 1048576}\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT} />\n                M / <TextFormat\n                  value={metrics.base['memory.committedNonHeap'] / 1048576}\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT} />\n                M)\n            </p>\n            <Progress animated\n              min=\"0\"\n              max={metrics.base['memory.committedNonHeap']}\n              value={metrics.base['memory.usedNonHeap']}\n              color=\"success\"\n            >\n              <span>\n                <TextFormat\n                  value={metrics.base['memory.usedNonHeap'] * 100 / metrics.base['memory.committedNonHeap']}\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT} />\n                %\n              </span>\n            </Progress>\n          </Col>\n          <Col md=\"4\">\n            <b>Threads</b> (Total: {metrics.base['thread.count']} / {metrics.base['thread.max.count']})\n            <p><span>Live</span> {metrics.base['thread.count']}</p>\n            <Progress animated min=\"0\" value={metrics.base['thread.count']} max={metrics.base['thread.max.count']} color=\"success\">\n              <span>\n                <TextFormat\n                  value={metrics.base['thread.count'] * 100 / metrics.base['thread.max.count']}\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT} />\n                %\n              </span>\n            </Progress>\n          </Col>\n          <Col md=\"4\">\n            <b>Garbage collections</b>\n\n            {this.gaugeRow(metrics, 'Mark Sweep count', 'gc.MarkSweepCompact.count')}\n            {this.gaugeRow(metrics, 'Mark Sweep time', 'gc.MarkSweepCompact.time')}\n            {this.gaugeRow(metrics, 'Scavenge count', 'gc.Copy.count')}\n            {this.gaugeRow(metrics, 'Scavenge time', 'gc.Copy.time')}\n\n            {this.gaugeRow(metrics, 'Mark Sweep count', 'gc.PS MarkSweep.count')}\n            {this.gaugeRow(metrics, 'Mark Sweep time', 'gc.PS MarkSweep.time')}\n            {this.gaugeRow(metrics, 'Scavenge count', 'gc.PS Scavenge.count')}\n            {this.gaugeRow(metrics, 'Scavenge time', 'gc.PS Scavenge.time')}\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n    )\n\n  render() {\n    const { metrics, isFetching } = this.props;\n    const data = metrics || {};\n    const { servicesStats, cachesStats } = this.getStats(data);\n    return (\n        <div>\n          <h2 className=\"metrics-page-heading\">Application Metrics</h2>\n          <p>\n            <Button onClick={this.getMetrics} color={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\n              <FontAwesomeIcon icon=\"sync\" />&nbsp;\n              <Translate component=\"span\" contentKey=\"health.refresh.button\">Refresh</Translate>\n            </Button>\n          </p>\n          <hr />\n          {metrics.base ? this.renderBase(metrics) : ''}\n\n          { metrics.application ?\n            <Row>\n              <Col sm=\"12\">\n                <h3>HTTP requests (events per second)</h3>\n                <p>\n                  <span>Active requests:</span> <b>\n                    <TextFormat\n                      value={metrics.application['InstrumentedFilter.activeRequests'].count}\n                      type=\"number\"\n                      format={APP_WHOLE_NUMBER_FORMAT} />\n                  </b> - <span>Total requests:</span> <b>\n                    <TextFormat\n                      value={metrics.application['InstrumentedFilter.requests'].count}\n                      type=\"number\"\n                      format={APP_WHOLE_NUMBER_FORMAT} />\n                  </b>\n                </p>\n                <Table>\n                  <thead>\n                    <tr>\n                      <th>Code</th>\n                      <th>Count</th>\n                      <th className=\"text-right\">Mean</th>\n                      <th className=\"text-right\"><span>Average</span> (1 min)</th>\n                      <th className=\"text-right\"><span>Average</span> (5 min)</th>\n                      <th className=\"text-right\"><span>Average</span> (15 min)</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr key={0}>\n                      <td>OK</td>\n                      <td>\n                        <Progress\n                          min=\"0\"\n                          max={metrics.application['InstrumentedFilter.requests'].count}\n                          value={metrics.application['InstrumentedFilter.responseCodes.ok'].count}\n                          color=\"success\"\n                          animated\n                        />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.ok'].meanRate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.ok'].oneMinRate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.ok'].fiveMinRate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.ok'].fifteenMinRate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                    </tr>\n                    <tr key={1}>\n                      <td>Not Found</td>\n                      <td>\n                        <Progress\n                          min=\"0\"\n                          max={metrics.application['InstrumentedFilter.requests'].count}\n                          value={metrics.application['InstrumentedFilter.responseCodes.notFound'].count}\n                          color=\"success\"\n                          animated\n                        />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.notFound'].meanRate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.notFound'].oneMinRate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.notFound'].fiveMinRate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.notFound'].fifteenMinRate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                    </tr>\n                    <tr key={2}>\n                      <td>Server Error</td>\n                      <td>\n                        <Progress\n                          min=\"0\"\n                          max={metrics.application['InstrumentedFilter.requests'].count}\n                          value={metrics.application['InstrumentedFilter.responseCodes.serverError'].count}\n                          color=\"success\"\n                          animated\n                        />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.serverError'].meanRate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.serverError'].oneMinRate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.serverError'].fiveMinRate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.application['InstrumentedFilter.responseCodes.serverError'].fifteenMinRate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </Col>\n            </Row>\n          : ''}\n          { servicesStats ?\n          <Row>\n            <Col sm=\"12\">\n              <h3>Services statistics (time in millisecond)</h3>\n            </Col>\n            <Table>\n              <thead>\n                <tr>\n                  <th>Service name</th>\n                  <th>Count</th>\n                  <th>Mean</th>\n                  <th>Min</th>\n                  <th>p50</th>\n                  <th>p75</th>\n                  <th>p95</th>\n                  <th>p99</th>\n                  <th>Max</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Object.keys(servicesStats).map((key, index) => (\n                  <tr key={key}>\n                    <td>{key}</td>\n                    <td>{servicesStats[key].count}</td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].mean}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].min}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].p50}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].p75}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].p95}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].p99}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].max}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Row>\n          : ''}\n\n          {this.renderModal()}\n\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  metrics: storeState.administration.metrics,\n  isFetching: storeState.administration.loading,\n  threadDump: storeState.administration.threadDump\n});\n\nconst mapDispatchToProps = { systemMetrics, systemThreadDump };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MetricsPage);\n","import React from 'react';\nimport { Collapse, Card, CardBody, Row } from 'reactstrap';\n\nexport interface IThreadItemProps {\n  threadDumpInfo: any;\n}\n\nexport interface IThreadItemState {\n  collapse: boolean;\n}\n\nexport class ThreadItem extends React.Component<IThreadItemProps, IThreadItemState> {\n  state: IThreadItemState = {\n    collapse: false\n  };\n\n  toggleStackTrace = () => {\n    this.setState({\n      collapse: !this.state.collapse\n    });\n  };\n\n  render() {\n    const { threadDumpInfo } = this.props;\n\n    return <div>\n      <a onClick={this.toggleStackTrace} style={{ color: 'hotpink' }}>\n        {this.state.collapse ? <span>Hide StackTrace</span> : <span>Show StackTrace</span>}\n      </a>\n      <Collapse isOpen={this.state.collapse}>\n        <Card>\n          <CardBody>\n            <Row className=\"break\" style={{ overflowX: 'scroll' }}>\n              {Object.entries(threadDumpInfo.stackTrace).map(([stK, stV]: [string, any]) => (\n                <samp key={`detail-${stK}`}>\n                  {stV.className}.{stV.methodName}\n                  <code>({stV.fileName}:{stV.lineNumber})</code>\n                </samp>\n              ))}\n              <span className=\"mt-1\"/>\n              </Row>\n          </CardBody>\n        </Card>\n      </Collapse>\n    </div>;\n  }\n}\n\nexport default ThreadItem;\n","import React from 'react';\nimport { Switch } from 'react-router-dom';\n\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\nimport UserManagement from './user-management';\nimport UserManagementDetail from './user-management-detail';\nimport UserManagementUpdate from './user-management-update';\nimport UserManagementDeleteDialog from './user-management-delete-dialog';\n\nconst Routes = ({ match }) => (\n  <>\n    <Switch>\n      <ErrorBoundaryRoute exact path={`${match.url}/new`} component={UserManagementUpdate} />\n      <ErrorBoundaryRoute exact path={`${match.url}/:login/edit`} component={UserManagementUpdate} />\n      <ErrorBoundaryRoute exact path={`${match.url}/:login`} component={UserManagementDetail} />\n      <ErrorBoundaryRoute path={match.url} component={UserManagement} />\n    </Switch>\n    <ErrorBoundaryRoute path={`${match.url}/:login/delete`} component={UserManagementDeleteDialog} />\n  </>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\nimport { Translate, ICrudGetAction, ICrudDeleteAction } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { IUser } from 'app/shared/model/user.model';\nimport { getUser, deleteUser } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IUserManagementDeleteDialogProps extends StateProps, DispatchProps, RouteComponentProps<{login: string}> {}\n\nexport class UserManagementDeleteDialog extends React.Component<IUserManagementDeleteDialogProps> {\n  componentDidMount() {\n    this.props.getUser(this.props.match.params.login);\n  }\n\n  confirmDelete = event => {\n    this.props.deleteUser(this.props.user.login);\n    this.handleClose(event);\n  }\n\n  handleClose = event => {\n    event.stopPropagation();\n    this.props.history.goBack();\n  }\n\n  render() {\n    const { user } = this.props;\n    return (\n      <Modal isOpen toggle={this.handleClose}>\n      <ModalHeader toggle={this.handleClose}><Translate contentKey=\"entity.delete.title\">Confirm delete operation</Translate></ModalHeader>\n      <ModalBody>\n        <Translate contentKey=\"userManagement.delete.question\" interpolate={{ login: user.login }}>Are you sure you want to delete this User?</Translate>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={this.handleClose}>\n          <FontAwesomeIcon icon=\"ban\"/>&nbsp;\n          <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n        </Button>\n        <Button color=\"danger\" onClick={this.confirmDelete}>\n          <FontAwesomeIcon icon=\"trash\" />&nbsp;\n          <Translate contentKey=\"entity.action.delete\">Delete</Translate>\n        </Button>\n      </ModalFooter>\n    </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  user: storeState.userManagement.user\n});\n\nconst mapDispatchToProps = { getUser, deleteUser };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagementDeleteDialog);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Row, Badge } from 'reactstrap';\nimport { Translate, TextFormat } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { APP_DATE_FORMAT } from 'app/config/constants';\nimport { languages } from 'app/config/translation';\nimport { getUser } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IUserManagementDetailProps extends StateProps, DispatchProps, RouteComponentProps<{login: string}> {}\n\nexport class UserManagementDetail extends React.Component<IUserManagementDetailProps> {\n  componentDidMount() {\n    this.props.getUser(this.props.match.params.login);\n  }\n\n  render() {\n    const { user } = this.props;\n    return (\n      <div>\n        <h2>\n          <Translate contentKey=\"userManagement.detail.title\">User</Translate> [<b>{user.login}</b>]\n        </h2>\n        <Row size=\"md\">\n          <dl className=\"jh-entity-details\">\n            <dt><Translate contentKey=\"userManagement.login\">Login</Translate></dt>\n            <dd>\n              <span>{user.login}</span>&nbsp;\n              {\n                user.activated ? (\n                  <Badge color=\"success\"><Translate contentKey=\"userManagement.activated\">Activated</Translate></Badge>\n                ) : (\n                  <Badge color=\"danger\"><Translate contentKey=\"userManagement.deactivated\">Deactivated</Translate></Badge>\n                )\n              }\n            </dd>\n            <dt><Translate contentKey=\"userManagement.firstName\">First Name</Translate></dt>\n            <dd>{user.firstName}</dd>\n            <dt><Translate contentKey=\"userManagement.lastName\">Last Name</Translate></dt>\n            <dd>{user.lastName}</dd>\n            <dt><Translate contentKey=\"userManagement.email\">Email</Translate></dt>\n            <dd>{user.email}</dd>\n            <dt><Translate contentKey=\"userManagement.langKey\">Lang Key</Translate></dt>\n            <dd>{user.langKey ? languages[user.langKey].name : undefined}</dd>\n            <dt><Translate contentKey=\"userManagement.createdBy\">Created By</Translate></dt>\n            <dd>{user.createdBy}</dd>\n            <dt><Translate contentKey=\"userManagement.createdDate\">Created Date</Translate></dt>\n            <dd><TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid /></dd>\n            <dt><Translate contentKey=\"userManagement.lastModifiedBy\">Last Modified By</Translate></dt>\n            <dd>{user.lastModifiedBy}</dd>\n            <dt><Translate contentKey=\"userManagement.lastModifiedDate\">Last Modified Date</Translate></dt>\n            <dd><TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid /></dd>\n            <dt><Translate contentKey=\"userManagement.profiles\">Profiles</Translate></dt>\n            <dd>\n              <ul className=\"list-unstyled\">\n                {\n                  user.authorities ? (\n                  user.authorities.map((authority, i) => (\n                    <li key={`user-auth-${i}`}>\n                      <Badge color=\"info\">{authority}</Badge>\n                    </li>\n                  ))) : null\n                }\n              </ul>\n            </dd>\n          </dl>\n        </Row>\n        <Button\n          tag={Link} to=\"/admin/user-management\" replace\n          color=\"info\"\n        >\n          <FontAwesomeIcon icon=\"arrow-left\" /> <span className=\"d-none d-md-inline\" ><Translate contentKey=\"entity.action.back\">Back</Translate></span>\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  user: storeState.userManagement.user\n});\n\nconst mapDispatchToProps = { getUser };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagementDetail);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Label, Row, Col } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvField, AvFeedback } from 'availity-reactstrap-validation';\nimport { Translate, translate, ICrudGetAction, ICrudGetAllAction, ICrudPutAction } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { locales, languages } from 'app/config/translation';\nimport { getUser, getRoles, updateUser, createUser, reset } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IUserManagementUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{login: string}> {}\n\nexport interface IUserManagementUpdateState {\n  isNew: boolean;\n}\n\nexport class UserManagementUpdate extends React.Component<IUserManagementUpdateProps, IUserManagementUpdateState> {\n\n  state: IUserManagementUpdateState = {\n    isNew: !this.props.match.params || !this.props.match.params.login\n  };\n\n  componentDidMount() {\n    !this.state.isNew && this.props.getUser(this.props.match.params.login);\n    this.props.getRoles();\n  }\n\n  componentWillUnmount() {\n    this.props.reset();\n  }\n\n  saveUser = (event, values) => {\n    if (this.state.isNew) {\n      this.props.createUser(values);\n    } else {\n      this.props.updateUser(values);\n    }\n    this.handleClose();\n  }\n\n  handleClose = () => {\n    this.props.history.push('/admin/user-management');\n  }\n\n  render() {\n    const isInvalid = false;\n    const { user, loading, updating, roles } = this.props;\n    const { isNew } = this.state;\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h1>\n              <Translate contentKey=\"userManagement.home.createOrEditLabel\">Create or edit a User</Translate>\n            </h1>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n          { loading ? <p>Loading...</p>\n          : <AvForm onValidSubmit={this.saveUser}>\n            {user.id ? (\n              <AvGroup>\n                <Label for=\"id\">\n                  <Translate contentKey=\"global.field.id\">ID</Translate>\n                </Label>\n                <AvField type=\"text\" className=\"form-control\" name=\"id\" required readOnly value={user.id} />\n              </AvGroup>\n            ) : null}\n            <AvGroup>\n              <Label for=\"login\">\n                <Translate contentKey=\"userManagement.login\">Login</Translate>\n              </Label>\n              <AvField\n                type=\"text\"\n                className=\"form-control\"\n                name=\"login\"\n                validate={{\n                  required: {\n                    value: true,\n                    errorMessage: translate('register.messages.validate.login.required')\n                  },\n                  pattern: {\n                    value: '^[_.@A-Za-z0-9-]*$',\n                    errorMessage: translate('register.messages.validate.login.pattern')\n                  },\n                  minLength: {\n                    value: 1,\n                    errorMessage: translate('register.messages.validate.login.minlength')\n                  },\n                  maxLength: {\n                    value: 50,\n                    errorMessage: translate('register.messages.validate.login.maxlength')\n                  }\n                }}\n                value={user.login}\n              />\n            </AvGroup>\n            <AvGroup>\n              <Label for=\"firstName\">\n                <Translate contentKey=\"userManagement.firstName\">First Name</Translate>\n              </Label>\n              <AvField\n                type=\"text\"\n                className=\"form-control\"\n                name=\"firstName\"\n                validate={{\n                  maxLength: {\n                    value: 50,\n                    errorMessage: translate('entity.validation.maxlength', { max: 50 })\n                  }\n                }}\n                value={user.firstName}\n                />\n            </AvGroup>\n            <AvGroup>\n              <Label for=\"lastName\">\n                <Translate contentKey=\"userManagement.lastName\">Last Name</Translate>\n              </Label>\n              <AvField\n                type=\"text\"\n                className=\"form-control\"\n                name=\"lastName\"\n                validate={{\n                  maxLength: {\n                    value: 50,\n                    errorMessage: translate('entity.validation.maxlength', { max: 50 })\n                  }\n                }}\n                value={user.lastName}\n              />\n              <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\n            </AvGroup>\n            <AvGroup>\n              <AvField\n                name=\"email\"\n                label={translate('global.form.email')}\n                placeholder={translate('global.form.email.placeholder')}\n                type=\"email\"\n                validate={{\n                  required: {\n                    value: true,\n                    errorMessage: translate('global.messages.validate.email.required')\n                  },\n                  email: {\n                    errorMessage: translate('global.messages.validate.email.invalid')\n                  },\n                  minLength: {\n                    value: 5,\n                    errorMessage: translate('global.messages.validate.email.minlength')\n                  },\n                  maxLength: {\n                    value: 254,\n                    errorMessage: translate('global.messages.validate.email.maxlength')\n                  }\n              }}\n              value={user.email}\n            />\n            </AvGroup>\n            <AvGroup check>\n              <Label>\n                <AvInput type=\"checkbox\" name=\"activated\" value={user.activated} /> <Translate contentKey=\"userManagement.activated\">Activated</Translate>\n              </Label>\n            </AvGroup>\n            <AvGroup>\n              <Label for=\"langKey\">\n                <Translate contentKey=\"userManagement.langKey\">Language Key</Translate>\n              </Label>\n              <AvField type=\"select\" className=\"form-control\" name=\"langKey\" value={user.langKey}>\n                {locales.map(locale =>\n                  <option value={locale} key={locale}>\n                    {languages[locale].name}\n                  </option>\n                )}\n              </AvField>\n            </AvGroup>\n            <AvGroup>\n              <Label for=\"authorities\">\n                <Translate contentKey=\"userManagement.profiles\">Language Key</Translate>\n              </Label>\n              <AvInput type=\"select\" className=\"form-control\" name=\"authorities\" value={user.authorities} multiple>\n                {roles.map(role => (\n                  <option value={role} key={role}>\n                    {role}\n                  </option>\n                ))}\n              </AvInput>\n            </AvGroup>\n            <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\n              <FontAwesomeIcon icon=\"arrow-left\" />&nbsp;\n              <span className=\"d-none d-md-inline\">\n                <Translate contentKey=\"entity.action.back\">Back</Translate>\n              </span>\n            </Button>\n            &nbsp;\n            <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\n              <FontAwesomeIcon icon=\"save\" />&nbsp;\n              <Translate contentKey=\"entity.action.save\">Save</Translate>\n            </Button>\n          </AvForm>\n          }\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  user: storeState.userManagement.user,\n  roles: storeState.userManagement.authorities,\n  loading: storeState.userManagement.loading,\n  updating: storeState.userManagement.updating\n});\n\nconst mapDispatchToProps = { getUser, getRoles, updateUser, createUser, reset };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagementUpdate);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Table, Row, Badge } from 'reactstrap';\nimport {\n  Translate,\n  ICrudGetAllAction,\n  ICrudPutAction,\n  TextFormat,\n  JhiPagination,\n  getPaginationItemsNumber,\n  getSortState,\n  IPaginationBaseState\n} from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { APP_DATE_FORMAT } from 'app/config/constants';\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\nimport { getUsers, updateUser } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IUserManagementProps extends StateProps, DispatchProps, RouteComponentProps<{}> {}\n\nexport class UserManagement extends React.Component<IUserManagementProps, IPaginationBaseState> {\n  state: IPaginationBaseState = {\n    ...getSortState(this.props.location, ITEMS_PER_PAGE)\n  };\n\n  componentDidMount() {\n    this.getUsers();\n  }\n\n  sort = prop => () => {\n    this.setState({\n      order: this.state.order === 'asc' ? 'desc' : 'asc',\n      sort: prop\n    }, () => this.sortUsers());\n  }\n\n  sortUsers() {\n    this.getUsers();\n    this.props.history.push(`${this.props.location.pathname}?page=${this.state.activePage}&sort=${this.state.sort},${this.state.order}`);\n  }\n\n  handlePagination = activePage => this.setState({ activePage }, () => this.sortUsers());\n\n  getUsers = () => {\n    const { activePage, itemsPerPage, sort, order } = this.state;\n    this.props.getUsers(activePage - 1, itemsPerPage, `${sort},${order}`);\n  }\n\n  toggleActive = user => () => {\n    this.props.updateUser({\n      ...user,\n      activated: !user.activated\n    });\n  };\n\n  render() {\n    const { users, account, match, totalItems } = this.props;\n    return (\n      <div>\n        <h2 className=\"userManagement-page-heading\">\n          <Translate contentKey=\"userManagement.home.title\">Users</Translate>\n          <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\">\n            <FontAwesomeIcon icon=\"plus\" /> <Translate contentKey=\"userManagement.home.createLabel\">Create a new user</Translate>\n          </Link>\n        </h2>\n        <Table responsive striped>\n          <thead>\n            <tr>\n              <th className=\"hand\" onClick={this.sort('id')}><Translate contentKey=\"global.field.id\">ID</Translate><FontAwesomeIcon icon=\"sort\" /></th>\n              <th className=\"hand\" onClick={this.sort('login')}><Translate contentKey=\"userManagement.login\">Login</Translate><FontAwesomeIcon icon=\"sort\" /></th>\n              <th className=\"hand\" onClick={this.sort('email')}><Translate contentKey=\"userManagement.email\">Email</Translate><FontAwesomeIcon icon=\"sort\" /></th>\n              <th />\n              <th className=\"hand\" onClick={this.sort('langKey')}><Translate contentKey=\"userManagement.langKey\">Lang Key</Translate><FontAwesomeIcon icon=\"sort\" /></th>\n              <th><Translate contentKey=\"userManagement.profiles\">Profiles</Translate></th>\n              <th className=\"hand\" onClick={this.sort('createdDate')}><Translate contentKey=\"userManagement.createdDate\">Created Date</Translate><FontAwesomeIcon icon=\"sort\" /></th>\n              <th className=\"hand\" onClick={this.sort('lastModifiedBy')}>\n                <Translate contentKey=\"userManagement.lastModifiedBy\">Last Modified By</Translate><FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th className=\"hand\" onClick={this.sort('lastModifiedDate')}>\n                <Translate contentKey=\"userManagement.lastModifiedDate\">Last Modified Date</Translate><FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th />\n            </tr>\n          </thead>\n          <tbody>\n            {\n            users.map((user, i) => (\n              <tr id={user.login} key={`user-${i}`}>\n                <td>\n                  <Button\n                    tag={Link} to={`${match.url}/${user.login}`}\n                    color=\"link\" size=\"sm\"\n                  >\n                    {user.id}\n                  </Button>\n                </td>\n                <td>{user.login}</td>\n                <td>{user.email}</td>\n                <td>\n                  {user.activated ? (\n                    <Button color=\"success\" onClick={this.toggleActive(user) }>\n                      Activated\n                    </Button>\n                  ) : (\n                    <Button color=\"danger\" onClick={this.toggleActive(user) }>\n                      Deactivated\n                    </Button>\n                  )}\n                </td>\n                <td>{user.langKey}</td>\n                <td>\n                  {\n                    user.authorities ? (\n                    user.authorities.map((authority, j) => (\n                      <div key={`user-auth-${i}-${j}`}>\n                        <Badge color=\"info\">{authority}</Badge>\n                      </div>\n                    ))) : null\n                  }\n                </td>\n                <td><TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid /></td>\n                <td>{user.lastModifiedBy}</td>\n                <td><TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid /></td>\n                <td className=\"text-right\">\n                  <div className=\"btn-group flex-btn-group-container\">\n                    <Button\n                      tag={Link} to={`${match.url}/${user.login}`}\n                      color=\"info\" size=\"sm\"\n                    >\n                      <FontAwesomeIcon icon=\"eye\" /> <span className=\"d-none d-md-inline\" ><Translate contentKey=\"entity.action.view\">View</Translate></span>\n                    </Button>\n                    <Button\n                      tag={Link} to={`${match.url}/${user.login}/edit`}\n                      color=\"primary\" size=\"sm\"\n                    >\n                      <FontAwesomeIcon icon=\"pencil-alt\" /> <span className=\"d-none d-md-inline\"><Translate contentKey=\"entity.action.edit\">Edit</Translate></span>\n                    </Button>\n                    <Button\n                      tag={Link} to={`${match.url}/${user.login}/delete`}\n                      color=\"danger\" size=\"sm\" disabled={account.login === user.login}\n                    >\n                      <FontAwesomeIcon icon=\"trash\" /> <span className=\"d-none d-md-inline\"><Translate contentKey=\"entity.action.delete\">Delete</Translate></span>\n                    </Button>\n                  </div>\n                </td>\n              </tr>\n            ))\n          }\n          </tbody>\n        </Table>\n        <Row className=\"justify-content-center\">\n          <JhiPagination\n            items={getPaginationItemsNumber(totalItems, this.state.itemsPerPage)}\n            activePage={this.state.activePage}\n            onSelect={this.handlePagination}\n            maxButtons={5}\n          />\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  users: storeState.userManagement.users,\n  totalItems: storeState.userManagement.totalItems,\n  account: storeState.authentication.account\n});\n\nconst mapDispatchToProps = { getUsers, updateUser };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagement);\n","export const ITEMS_PER_PAGE = 20;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAOA;AACA;AACA;;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAMA;AACA;AAKA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AAGA;AACA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;;AAmDA;AAlFA;AACA;AACA;AA+BA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AAIA;AAGA;AAXA;AAqBA;AAGA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;ACvHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AAEA;AASA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AA0CA;AAhEA;AACA;AACA;AAsBA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;;AAAA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAiBA;AACA;AAAA;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACjGA;AACA;AAEA;AAaA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;;AA0EA;AAxEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AAEA;AACA;AAEA;AAEA;AAEA;;AAAA;;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AAkCA;AACA;AAGA;AACA;AAAA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7JA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;;AAIA;AAKA;AACA;AAMA;AACA;AAKA;AAGA;AACA;;AACA;;AAIA;AAKA;AACA;AAMA;AACA;AAKA;AAGA;AACA;;AAAA;;AAAA;;AACA;AAAA;;AAAA;AACA;AACA;AACA;AAKA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAmPA;AAxYA;AACA;AACA;AA0JA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAAA;AACA;;AAIA;;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAQA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AACA;AAMA;AACA;AACA;AACA;AAQA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AACA;AAMA;AACA;AACA;AACA;AAQA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AACA;AAUA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AACA;AAUA;AAEA;AAIA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC7aA;AACA;AAUA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AA0BA;AAxBA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;;AAAA;AACA;;AAAA;;AAAA;AAAA;AAHA;AAMA;AAMA;AACA;AAAA;;AAEA;AACA;AACA;;;;;;;;;;;;;;AClDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AARA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AAEA;AACA;AACA;AAGA;AAKA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAuBA;AAnCA;AACA;AACA;AAYA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;;AACA;AAKA;AACA;AAAA;;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AAAA;AAAA;;AAiEA;AAhEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;AAEA;AACA;AAEA;AAIA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAKA;AAQA;AAIA;;AAAA;AAAA;AAIA;AACA;AAAA;;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAWA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAoKA;AAxLA;AACA;AACA;AACA;AAEA;AACA;AACA;AAeA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AAAA;AAMA;AACA;AACA;AAEA;AAQA;AACA;;AACA;AACA;;AAIA;AACA;;AACA;AAQA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChOA;AACA;AACA;AACA;AACA;AAUA;AAEA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;;AA4GA;AAxIA;AACA;AACA;AASA;AACA;AACA;AACA;AAgBA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAGA;AAIA;AACA;AAOA;AACA;AACA;AAWA;AACA;AAKA;AAKA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;;AAAA;AAAA;AAEA;AAIA;;AAAA;AAAA;AAEA;AAIA;;AAAA;AAAA;AASA;AACA;AASA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;ACnLA;AAAA;AAAA;AACA;AACA;;;;;;A","sourceRoot":""}